package cle.domain;

// Generated 11-Mar-2011 20:55:57 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.annotate.JsonAutoDetect;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * Collection generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Table(name = "collection")
@JsonAutoDetect(setterVisibility = Visibility.NONE, creatorVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, fieldVisibility = Visibility.NONE)
public class Collection implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@JsonProperty
	private Integer collectionid;
	private User user;
	@JsonProperty
	private String title;
	@JsonProperty
	private Date created;
	@JsonProperty
	private Date modified;
	@JsonProperty
	private String description;
	@JsonProperty
	private Integer visibility;
	private Set<Resource> resources = new HashSet<Resource>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Module> modules = new HashSet<Module>(0);

	public Collection() {
	}

	public Collection(User user, String title, Date modified) {
		this.user = user;
		this.title = title;
		this.modified = modified;
	}

	public Collection(User user, String title, Date created, Date modified,
			String description, Integer visibility, Set<Resource> resources,
			Set<Comment> comments, Set<Module> modules) {
		this.user = user;
		this.title = title;
		this.created = created;
		this.modified = modified;
		this.description = description;
		this.visibility = visibility;
		this.resources = resources;
		this.comments = comments;
		this.modules = modules;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "collectionid", unique = true, nullable = false)
	public Integer getCollectionid() {
		return this.collectionid;
	}

	public void setCollectionid(Integer collectionid) {
		this.collectionid = collectionid;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "author", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "title", nullable = false, length = 45)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified", nullable = false, length = 19)
	public Date getModified() {
		return this.modified;
	}

	public void setModified(Date modified) {
		this.modified = modified;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "visibility")
	public Integer getVisibility() {
		return this.visibility;
	}

	public void setVisibility(Integer visibility) {
		this.visibility = visibility;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "collection_has_resource", joinColumns = { @JoinColumn(name = "collection_collectionid", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "resource_resourceid", nullable = false, updatable = false) })
	public Set<Resource> getResources() {
		return this.resources;
	}

	public void setResources(Set<Resource> resources) {
		this.resources = resources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "collection")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "module_has_collection", joinColumns = { @JoinColumn(name = "collection_collectionid", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "module_moduleid", nullable = false, updatable = false) })
	public Set<Module> getModules() {
		return this.modules;
	}

	public void setModules(Set<Module> modules) {
		this.modules = modules;
	}

	public void addModule(Module module) {

		this.modules.add(module);
	}

	@Override
	public boolean equals(Object compareObj)// Roles are equal when the role
											// names are the same, - don't care
											// if objects are equal
	{
		if (this == compareObj) // Are they exactly the same instance?
			return true;

		if (compareObj == null) // Is the object being compared null?
			return false;

		if (!(compareObj instanceof Collection)) // Is the object being compared
													// also
			// a Person?
			return false;

		Collection compare= (Collection) compareObj; // Convert the object
															// to a
		// Person

		return this.collectionid.equals(compare.collectionid); // Are they
																	// equal?
	}
	 public int hashCode() {
	        return this.collectionid;
	    }

	public void addResource(Resource r) {
		r.getCollections().add(this);
		getResources().add(r);

	}

	public void removeResource(Resource r) {
		r.getCollections().remove(this);
		getResources().remove(r);

	}
}
