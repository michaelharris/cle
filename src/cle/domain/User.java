package cle.domain;

// Generated 11-Mar-2011 20:55:57 by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.codehaus.jackson.annotate.*;
import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.transaction.annotation.Transactional;

/**
 * User generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Table(name = "user", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
@JsonAutoDetect(setterVisibility = Visibility.NONE, creatorVisibility = Visibility.NONE, getterVisibility = Visibility.NONE, fieldVisibility = Visibility.NONE)
public class User implements java.io.Serializable, UserDetails {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@JsonProperty
	private Integer userid;
	private String email;
	private String password;
	private String confirmPassword;
	@JsonProperty
	private String firstName;
	@JsonProperty
	private String lastName;
	private String courseType;
	private byte[] image;
	private String description;
	private Boolean enabled;
	private Set<Module> modules = new HashSet<Module>(0);
	private Set<Role> roles = new HashSet<Role>(0);
	private Set<Collection> collections = new HashSet<Collection>(0);
	private Set<Resource> resources = new HashSet<Resource>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<GrantedAuthority> gaSet = new HashSet<GrantedAuthority>(0);

	public User() {
	}

	public User(String email, String password, String firstName, String lastName) {
		this.email = email;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
	}

	public User(String email, String password, String firstName,
			String lastName, String courseType, byte[] image,
			String description, Boolean enabled, Set<Module> modules,
			Set<Role> roles, Set<Collection> collections, Set<Comment> comments) {
		this.email = email;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.courseType = courseType;
		this.image = image;
		this.description = description;
		this.enabled = enabled;
		this.modules = modules;
		this.roles = roles;
		this.collections = collections;
		this.comments = comments;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "userid", unique = true, nullable = false)
	public Integer getUserid() {
		return this.userid;
	}

	public void setUserid(Integer userid) {
		this.userid = userid;
	}

	@Column(name = "email", unique = true, nullable = false, length = 60)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Transient
	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	@Column(name = "firstName", nullable = false, length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "lastName", nullable = false, length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "courseType", length = 45)
	public String getCourseType() {
		return this.courseType;
	}

	public void setCourseType(String courseType) {
		this.courseType = courseType;
	}

	@Column(name = "image")
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "enabled")
	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "module_has_user", joinColumns = { @JoinColumn(name = "user_userid", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "module_moduleid", nullable = false, updatable = false) })
	public Set<Module> getModules() {
		return this.modules;
	}

	public void setModules(Set<Module> modules) {
		this.modules = modules;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "user_has_role", joinColumns = { @JoinColumn(name = "user_userid", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "role_roleid", nullable = false, updatable = false) })
	public Set<Role> getRoles() {
		return this.roles;
	}

	public void setRoles(Set<Role> roles) {
		// setUserAuthorities(roles);
		this.roles = roles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Collection> getCollections() {
		return this.collections;
	}

	public void setCollections(Set<Collection> collections) {
		this.collections = collections;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Resource> getResources() {
		return this.resources;
	}

	public void setResources(Set<Resource> resources) {
		this.resources = resources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@Override
	@JsonIgnore
	@Transient
	public java.util.Collection<GrantedAuthority> getAuthorities() {
		setUserAuthorities(this.roles);
		return this.gaSet;
	}

	@Override
	@JsonIgnore
	@Transient
	public String getUsername() {
		// TODO Auto-generated method stub
		return this.email;
	}

	@Override
	@JsonIgnore
	@Transient
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@JsonIgnore
	@Transient
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@JsonIgnore
	@Transient
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@JsonIgnore
	@Transient
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return true;
	}

	@Transient
	@JsonIgnore
	public void setUserAuthorities(Set<Role> roles) {

		List<GrantedAuthority> listOfAuthorities = new ArrayList<GrantedAuthority>();
		for (Role role : roles) {
			listOfAuthorities
					.add(new GrantedAuthorityImpl(role.getAuthority()));
		}
		// authorities = (GrantedAuthority[])listOfAuthorities.toArray();
		this.gaSet.addAll(listOfAuthorities);
	}

	public void addModule(Module m) {
		m.getUsers().add(this);
		getModules().add(m);
	}
	
	
	@Override
	public boolean equals(Object compareObj)// Roles are equal when the role
											// names are the same, - don't care
											// if objects are equal
	{
		if (this == compareObj) // Are they exactly the same instance?
			return true;

		if (compareObj == null) // Is the object being compared null?
			return false;

		if (!(compareObj instanceof User)) // Is the object being compared
													// also
			// a Person?
			return false;

		User compare= (User) compareObj; // Convert the object
															// to a
		// Person

		return this.userid.equals(compare.userid); // Are they
																	// equal?
	}
	 public int hashCode() {
	        return this.userid;
	    }
}
